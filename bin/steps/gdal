#!/usr/bin/env bash

# This script serves as the GDAL build step of the
# [**Python Buildpack**](https://github.com/Scalingo/python-buildpack)
# compiler.
#
# A [buildpack](https://doc.scalingo.com/articles/buildpacks) is an
# adapter between a Python application and Scalingo's runtime.
#
# This script is invoked by [`bin/compile`](/).

# The location of the pre-compiled cryptography binary.
VENDORED_GDAL="${VENDOR_URL}/libraries/vendor/gdal.tar.gz"

PKG_CONFIG_PATH="/app/.scalingo/vendor/lib/pkgconfig:$PKG_CONFIG_PATH"

# Syntax sugar.
# shellcheck source=bin/utils
source "$BIN_DIR/utils"

# If GDAL exists within requirements, use vendored gdal.
if (pip-grep -s requirements.txt GDAL gdal pygdal &> /dev/null) then

  if [ ! -f ".scalingo/vendor/bin/gdalserver" ]; then

    puts-warn "The vendored GDAL package in the Scalingo Python Buildpack now deprecated."
    puts-warn "To enable GDAL, install 'libgdal-dev' thanks to our APT buildpack - https://doc.scalingo.com/platform/deployment/buildpacks/apt"

    echo "-----> Noticed GDAL. Bootstrapping gdal."
    mkdir -p .scalingo/vendor
    # Download and extract cryptography into target vendor directory.
    curl "$VENDORED_GDAL" -s | tar zxv -C .scalingo/vendor &> /dev/null
    mcount "steps.vendor.gdal"
  fi

  GDAL=$(pwd)/vendor
  export GDAL
fi
