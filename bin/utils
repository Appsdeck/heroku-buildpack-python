shopt -s extglob

if [ $(uname) == Darwin ]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

# Syntax sugar.
indent() {
  sed "s/^/       /"
}

# Clean up pip output
cleanup() {
  sed -e 's/\.\.\.\+/.../g' | sed -e '/already satisfied/Id' | sed -e '/Overwriting/Id' | sed -e '/python executable/Id' | sed -e '/no previously-included files/Id'
}

# Buildpack Steps.
puts-step() {
  echo "-----> $@"
}

# Buildpack Warnings.
puts-warn() {
  echo " !     $@"
}

set-export() {
  echo "export $1=$2" >> $EXPORT_PATH
}

# Usage: $ set-env key value
set-env() {
  set-export "$1" "$3"
  echo "export $1=$2" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
set-default-env() {
  set-export "$1" "$3"
  echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

# Usage: $ un-set-env key
un-set-env() {
  echo "unset $1" >> $PROFILE_PATH
}

# Does some serious copying.
deep-cp() {
  declare source="$1" target="$2"

  mkdir -p "$target"

  # cp doesn't like being called without source params,
  # so make sure they expand to something first.
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s nullglob dotglob
    set -- "$source"/!(tmp|.|..)
    [[ $# == 0 ]] || cp -a "$@" "$target"
  )
}

# Does some serious moving.
deep-mv() {
  deep-cp "$1" "$2"
  deep-rm "$1"
}

# Does some serious deleting.
deep-rm() {
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s dotglob
    rm -rf "$1"/!(.curlrc|.netrc|tmp|.|..)
  )
}


sub-env() {

  WHITELIST=${2:-''}
  BLACKLIST=${3:-'^(GIT_DIR|PYTHONHOME|LD_LIBRARY_PATH|LIBRARY_PATH|PATH)$'}

  (
    if [ -d "$ENV_DIR" ]; then
      for e in $(ls $ENV_DIR); do
        echo "$e" | grep -E "$WHITELIST" | grep -qvE "$BLACKLIST" &&
        export "$e=$(cat $ENV_DIR/$e)"
        :
      done
    fi

    $1

  )
}

real_curl=$(which curl)
function curl() {
  local http_url=''
  local write_file=''
  local create_output_filename=''
  local curl_args=$*

  for i ; do
    case "$i" in
    -O|--remote-name)
      create_output_filename=true
      shift;;
    -m|--max-time)
      shift; shift;;
    -f|--fail)
      shift;;
    -o|--output)
      if [[ ${2} != "-" ]]
      then
        write_file=${2}
      fi
      shift; shift;;
    -s|--silent)
      shift;;
    -L|--location|--)
      http_url=${2}; shift;
      filename=$(sed 's/[:\/]/_/g' <<< ${http_url})
      shift;
    esac
  done

  ## Do we have to generate a filename ourselves to write to?
  if [[ -n "$create_output_filename" ]]
  then
    write_file=$(echo ${http_url} | rev | cut -d\/ -f1 | rev)
  fi

  if test -f $BIN_DIR/../dependencies/$filename
  then
    ## Was a file to write to provided?
    if [[ -n "$write_file" ]]
    then
      ## Write to file
      cat $BIN_DIR/../dependencies/$filename > $write_file
    else
      # Stream output
    cat $BIN_DIR/../dependencies/$filename
    fi
  else
    $real_curl $curl_args
  fi
}
