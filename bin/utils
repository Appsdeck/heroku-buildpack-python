#!/usr/bin/env bash
shopt -s extglob
shopt -s nullglob

# The standard library.
if [[ ! -f  /tmp/stdlib.sh ]]; then
  curl --retry 3 -s https://lang-common.s3.amazonaws.com/buildpack-stdlib/v8/stdlib.sh > /tmp/stdlib.sh
fi
# shellcheck source=/dev/null
source /tmp/stdlib.sh

if [ "$(uname)" == Darwin ]; then
    sed() { command sed -l "$@"; }
else
    sed() { command sed -u "$@"; }
fi

# Syntax sugar.
indent() {
  sed "s/^/       /"
}


# Clean up pip output
cleanup() {
  sed -e 's/\.\.\.\+/.../g' | sed -e '/already satisfied/Id' | sed -e '/No files were found to uninstall/Id' | sed -e '/Overwriting/Id' | sed -e '/python executable/Id' | sed -e '/no previously-included files/Id'
}

# Buildpack Steps.
puts-step() {
  echo "-----> $*"
}

# Buildpack Warnings.
puts-warn() {
  echo " !     $*"
}

# Does some serious copying.
deep-cp() {
  declare source="$1" target="$2"

  mkdir -p "$target"

  # cp doesn't like being called without source params,
  # so make sure they expand to something first.
  # subshell to avoid surprising caller with shopts.
  (
    shopt -s nullglob dotglob
    set -- "$source"/!(tmp|.|..)
    [[ $# == 0 ]] || cp -a "$@" "$target"
  )
}


# Measure the size of the Python installation.
measure-size() {
  echo "$(du -s .scalingo/python 2>/dev/null || echo 0) | awk '{print $1}')"
}

real_curl=$(which curl)
function curl() {
  local http_url=''
  local write_file=''
  local create_output_filename=''
  local curl_args=$*

  for i ; do
    case "$i" in
    -O|--remote-name)
      create_output_filename=true
      shift;;
    -m|--max-time)
      shift; shift;;
    -f|--fail)
      shift;;
    -o|--output)
      if [[ ${2} != "-" ]]
      then
        write_file=${2}
      fi
      shift; shift;;
    -s|--silent)
      shift;;
    -L|--location|--)
      http_url=${2}; shift;
      filename=$(sed 's/[:\/]/_/g' <<< ${http_url})
      shift;
    esac
  done

  ## Do we have to generate a filename ourselves to write to?
  if [[ -n "$create_output_filename" ]]
  then
    write_file=$(echo ${http_url} | rev | cut -d\/ -f1 | rev)
  fi

  if test -f $BIN_DIR/../dependencies/$filename
  then
    ## Was a file to write to provided?
    if [[ -n "$write_file" ]]
    then
      ## Write to file
      cat $BIN_DIR/../dependencies/$filename > $write_file
    else
      # Stream output
    cat $BIN_DIR/../dependencies/$filename
    fi
  else
    $real_curl $curl_args
  fi
}

# Python version operator >
version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

# Python verison operator >=
version_gte() {
  if [ "$1" == "$2" ]; then
    return 0
  fi

  version_gt "$1" "$2"
}

# Check if Python 2
python2_check() {
  VERSION="$1"

  version_gte "$VERSION" "python-2.7.0" && version_gt "python-3.0.0" "$VERSION"
}

# Check if Python 3
python3_check() {
  VERSION="$1"

  version_gte "$VERSION" "python-3.0.0" && version_gt "python-4.0.0" "$VERSION"
}

# Check if Python version needs to install SQLite3
python_sqlite3_check() {
  VERSION="$1"
  MIN_PYTHON_3="python-3.6.6"
  MIN_PYTHON_2="python-2.7.15"

  ( python2_check "$VERSION" && version_gte "$VERSION" "$MIN_PYTHON_2" ) \
    || ( python3_check "$VERSION" && version_gte "$VERSION" "$MIN_PYTHON_3" ) \
    || ( version_gte "$VERSION" "3.7.0" )
}
